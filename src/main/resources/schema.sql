-- Define roles for users
create type role as enum ('ROLE_ADMIN', 'ROLE_DRIVER', 'ROLE_CLIENT');

-- Create sequence for user id
create sequence if not exists user_id_seq;

-- Define the user table
create table if not exists "user"(
    user_id int generated by default as identity primary key,  -- User ID
    name varchar(100) not null,                               -- User name
    email varchar(100) not null unique,                       -- User email
    password varchar(100) not null,                           -- User password
    banned bool not null default false,                       -- Ban status
    role role not null default 'ROLE_CLIENT'::role            -- User role
);

-- Define the client table
create table if not exists "client"(
    client_id int generated by default as identity primary key references "user"(user_id) on delete cascade,  -- Client ID
    phone_number varchar(13) not null unique,                -- Client phone number
    rating double precision not null default 0,              -- Client rating
    has_active_order bool not null default false,            -- Whether client has active order
    bonus_amount float not null default 0,                   -- Bonus amount for client
    number_of_ratings int not null default 0,                -- Number of ratings
    total_ratings int not null default 0                     -- Total ratings score
);

-- Define car classes
create type car_class as enum ('ECONOMY', 'BUSINESS');

-- Define vehicle types
create type vehicle_type as enum ('SEDAN', 'HATCHBACK', 'MINIVAN', 'MINIBUS');

-- Define the car table
create table if not exists "car"(
    car_id int generated by default as identity primary key,  -- Car ID
    license_plate varchar(8) not null unique,                 -- License plate
    model varchar(100) not null,                              -- Car model
    color varchar(20) not null,                               -- Car color
    car_class car_class not null,                             -- Car class
    vehicle_type vehicle_type not null                        -- Vehicle type
);

-- Define the driver table
create table if not exists "driver"(
    driver_id int generated by default as identity primary key references "user"(user_id) on delete cascade, -- Driver ID
    license_number varchar(10) not null unique,               -- License number
    rating double precision not null default 0,               -- Driver rating
    phone_number varchar(13) not null unique,                 -- Phone number
    busy bool not null default false,                         -- Whether driver is busy
    car_id int unique references "car"(car_id) on delete set null,  -- Car ID
    number_of_ratings int not null default 0,                 -- Number of ratings
    total_ratings int not null default 0                      -- Total ratings score
);

-- Define payment types
create type payment_type as enum ('CASH', 'CARD');

-- Define order statuses
create type order_status as enum ('NOT_ACCEPTED', 'ACCEPTED', 'WAITING_FOR_CLIENT', 'IN_PROCESS', 'COMPLETED', 'RATED_BY_CLIENT', 'RATED_BY_DRIVER', 'RATED_BY_ALL');

-- Define the order table
create table if not exists "order"(
    order_id int generated by default as identity primary key,  -- Order ID
    client_id int references "client"(client_id) on delete set null, -- Client ID
    driver_id int references "driver"(driver_id) on delete set null, -- Driver ID
    booking_datetime timestamp not null,                        -- Booking datetime
    pickup_address varchar(100) not null,                       -- Pickup address
    destination_address varchar(100) not null,                  -- Destination address
    journey_distance decimal(10,2) not null,                    -- Journey distance
    passenger_name varchar(100),                                -- Passenger name
    passenger_phone_number varchar(13),                         -- Passenger phone number
    booking_notes varchar(300),                                 -- Booking notes
    payment_type payment_type not null,                         -- Payment type
    pay_with_bonuses bool not null default false,               -- Pay with bonuses
    car_class car_class not null,                               -- Car class
    vehicle_type vehicle_type not null,                         -- Vehicle type
    price decimal(10,2) not null,                               -- Price
    order_status order_status not null default 'NOT_ACCEPTED'::order_status  -- Order status
);
